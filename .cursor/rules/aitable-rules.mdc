---
description: @load-when path="**/aitable/**" or path="**/api/aitable/**" or path="**/aitable-*.{ts,js}" or path="**/aitable*.{ts,js}" or path="**/lib/api/aitable.ts"  The AITable API is a RESTful API that allows you to interact with AITable data programmatically. It supports operations on records, fields, views, datasheets, attachments, spaces, and contacts.
globs: 
alwaysApply: false
---
# AITable API
@load-when path="**/aitable/**" or path="**/api/aitable/**" or path="**/aitable-*.{ts,js}" or path="**/aitable*.{ts,js}" or path="**/lib/api/aitable.ts"

The AITable API is a RESTful API that allows you to interact with AITable data programmatically. It supports operations on records, fields, views, datasheets, attachments, spaces, and contacts.

## Base URL

The base URL for all AITable API requests is:
```
https://aitable.ai
```

All requests must use HTTPS. The API follows RESTful conventions, using standard HTTP methods (`GET`, `POST`, `PATCH`, `DELETE`) to interact with resources.

## Authentication

All API requests require authentication using an API Token:
```
Authorization: Bearer YOUR_API_TOKEN
```

The API Token can be generated from the AITable user interface by going to User Center > Developer Configuration.

## Main Functions

Our API client implementation provides the following core functions:

### 1. fetchTableRecords(tableId, filter?)

Fetches all records from a specified table with optional filtering.

```typescript
// Example: Get all records from the projects table
const projects = await fetchTableRecords(AITABLE_CONFIG.PROJECTS_TABLE_ID);

// Example: Get filtered records
const activeProjects = await fetchTableRecords(
  AITABLE_CONFIG.PROJECTS_TABLE_ID,
  "Stage='Active'"
);
```

HTTP Request:
```
GET https://aitable.ai/fusion/v1/datasheets/{tableId}/records?filterByFormula={filter}
```

### 2. fetchRecord(tableId, recordId)

Retrieves a single record by its ID.

```typescript
// Example: Get a specific project by ID
const project = await fetchRecord(AITABLE_CONFIG.PROJECTS_TABLE_ID, 'rec12345');
```

HTTP Request:
```
GET https://aitable.ai/fusion/v1/datasheets/{tableId}/records/{recordId}
```

### 3. updateRecord(tableId, recordId, { fields })

Updates a single record by its ID.

```typescript
// Example: Update a record's stage
const updatedRecord = await updateRecord(
  AITABLE_CONFIG.PROJECTS_TABLE_ID, 
  'rec12345',
  { fields: { Stage: 'Launched' }}
);
```

HTTP Request:
```
PATCH https://aitable.ai/fusion/v1/datasheets/{tableId}/records
```

The request body must use this format:
```json
{
  "records": [
    {
      "recordId": "rec12345",
      "fields": {
        "Field1": "Value1",
        "Field2": "Value2"
      }
    }
  ]
}
```

### 4. fetchSpaceDetails()

Retrieves information about the AITable space (base).

```typescript
// Example: Get information about the current space
const spaceInfo = await fetchSpaceDetails();
```

HTTP Request:
```
GET https://aitable.ai/fusion/v1/spaces/{baseId}
```

### 5. fetchTables()

Retrieves all tables available in the space.

```typescript
// Example: Get all tables in the current space
const tables = await fetchTables();
```

HTTP Request:
```
GET https://aitable.ai/fusion/v1/spaces/{baseId}/datasheets
```

## Advanced Query Parameters

When fetching records, you can use several query parameters:

### Filtering Records

Use `filterByFormula` to filter records using formulas:

```
// Records where "Stage" equals "Launched"
filterByFormula=Stage="Launched"

// Records where "main selling points" contains "Vacuum" or "Thermal insulation"
filterByFormula=OR(find("Vacuum", {main selling point}) > 0, find("Thermal insulation", {main selling point}) > 0)
```

### Limiting Results

Use `maxRecords` to limit the number of records returned:

```
maxRecords=100
```

### Sorting Records

Use `sort` to specify sorting order:

```
// Sort by "promotion price" in descending order
sort={"field": "promotion price", "order": "desc"}
```

## Field Type Examples

When updating records, different field types in AITable require specific formats. Use our `updateRecord` function with the proper format for each field type:

### Text Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "Name": "Project Name",
    "Description": "Multi-line\ntext description"
  }
});
```

### Number Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "Budget": 50000,
    "Completion": 0.75 // 75%
  }
});
```

### Single Select
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "Stage": "Launched" // Must match an existing option
  }
});
```

### Multiple Select
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "Categories": ["Marketing", "Design"] // Array of existing options
  }
});
```

### Date Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "StartDate": "2023-10-01" // YYYY-MM-DD format
  }
});
```

### DateTime Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "CreatedTime": 1634567890000 // Unix timestamp in milliseconds
  }
});
```

### Attachment Fields
```typescript
// Attachments must be uploaded separately first, then referenced here
await updateRecord(tableId, recordId, { 
  fields: {
    "Documents": [
      {
        "name": "document.pdf",
        "size": 12345,
        "type": "application/pdf",
        "token": "attachment_token_from_upload"
      }
    ]
  }
});
```

### Link Fields (Relations)
```typescript
// Single link field
await updateRecord(tableId, recordId, { 
  fields: {
    "Client": "rec123456" // Single record ID
  }
});

// Multiple link field
await updateRecord(tableId, recordId, { 
  fields: {
    "Team": ["rec123456", "rec789012"] // Array of record IDs
  }
});
```

### User Fields
```typescript
// Single user field
await updateRecord(tableId, recordId, { 
  fields: {
    "ProjectManager": "usr123456" // Single user ID
  }
});

// Multiple user field
await updateRecord(tableId, recordId, { 
  fields: {
    "Collaborators": ["usr123456", "usr789012"] // Array of user IDs
  }
});
```

### Checkbox Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "Completed": true
  }
});
```

### Formula Fields
```typescript
// Formula fields are read-only and cannot be updated directly
```

### Lookup Fields
```typescript
// Lookup fields are read-only and cannot be updated directly
```

### Rollup Fields
```typescript
// Rollup fields are read-only and cannot be updated directly
```

### Currency Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "Revenue": 125000.50  // Numeric value
  }
});
```

### Percent Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "GrowthRate": 0.25  // 25% as decimal
  }
});
```

### URL Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "Website": "https://example.com"
  }
});
```

### Email Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "ContactEmail": "contact@example.com"
  }
});
```

### Phone Fields
```typescript
await updateRecord(tableId, recordId, { 
  fields: {
    "ContactPhone": "+12125551234"
  }
});
```

## Important Implementation Note

While our `updateRecord` function accepts a simple `{ fields: { ... } }` parameter structure, the actual API requires a more complex payload format. This is abstracted in our implementation:

```typescript
// What you use in your code (simple interface)
await updateRecord(tableId, recordId, { 
  fields: { 
    "Stage": "Launched" 
  }
});

// What our implementation sends to the API (actual required format)
fetch(url, {
  method: 'PATCH',
  body: JSON.stringify({
    records: [
      {
        recordId: recordId,
        fields: { 
          "Stage": "Launched" 
        }
      }
    ]
  })
});
```

All API endpoints use the `/fusion/v1/` path prefix, with the appropriate resource paths.

## Response Format

All API responses follow this general structure:

```json
{
  "success": true,
  "code": 200,
  "message": "SUCCESS",
  "data": {
    "total": 3,
    "pageNum": 1,
    "pageSize": 100,
    "records": [
      {
        "recordId": "rec12345",
        "createdAt": 1728390028000,
        "updatedAt": 1729684480000,
        "fields": {
          "Name": "Project Name",
          "Stage": "Launched",
          // Other fields...
        }
      },
      // More records...
    ]
  }
}
```

## Error Handling

When an API request fails, the response will include an error code and message:

```json
{
  "success": false,
  "code": 401,
  "message": "Authentication failed",
  "data": null
}
```

## Security Considerations

- Always keep your API Token secure
- All AITable API requests should be proxied through your backend to avoid exposing credentials
- Store API keys in environment variables (.env files)
- Consider implementing rate limiting for API requests

## Available Resources

The AITable API provides access to the following resource types:
- Records: Create, read, update, and delete records in tables
- Fields: Manage field definitions in tables
- Views: Access and manipulate views of tables
- Attachments: Handle file attachments
- Spaces: Manage workspaces
- Datasheets: Interact with tables
- Contacts: Manage user permissions

## Texonica Base Information

IMPORTANT: We ONLY use the "Texonica" base (ID: spc12q5HY4ay5) for all operations. The "Leadgen" base should NOT be used.

### Key Tables in Texonica Base

1. **Projects Table** (ID: dstq4onAEtjMleaeCm)
   - Primary field: "Title" (Formula field combining StartDate, Name, and Team)
   - Important fields:
     - "Stage": SingleSelect with options "Onboarding", "Launched", "Paused", "Stopped Working"
     - "StartDate": Text field for project start date
     - "Name": Text field for project name
     - "Team": OneWayLink to Teams table
     - "team_lookup": MagicLookUp field that retrieves team name
     - "Mediabuyer": TwoWayLink to Members table
     - "Client": TwoWayLink to Clients table (limited to single record)
     - "Budget": Text field
     - "ProjectValueUSD": MagicLookUp field calculating sum of subscription values

2. **Teams Table** (ID: dstCv7Y9Hkhf4AQcDA)
   - Used for organizing projects by team

3. **Subscriptions Table** (ID: dst93iSE1ToDG39AUY)
   - Connected to Projects via TwoWayLink
   - Contains financial data for project subscriptions

4. **Clients Table** (ID: dstoHuLq5fWmzRZvna)
   - Connected to Projects via TwoWayLink

5. **Members Table** (ID: dstEn1hH4TxaEoEC0W)
   - Contains information about media buyers

### Important Relationships

- Projects have one Client (via Client field)
- Projects can have multiple Subscriptions (via Subscriptions field)
- Projects belong to one Team (via Team field)
- Projects can have multiple Media Buyers (via Mediabuyer field)

### Common Filters

- Active Projects: `filterByFormula=OR(Stage="Launched",Stage="Onboarding")`
- Projects by Team: `filterByFormula=AND(OR(Stage="Launched",Stage="Onboarding"),team_lookup="Team Name")`

### Special Field Handling

- **Relation fields**: When working with relations (Client, Mediabuyer), these may be returned as strings or arrays and need special handling:
  ```typescript
  // Example of handling relation fields that might be strings or arrays
  const clientField = project.fields.Client;
  const clientId = Array.isArray(clientField) ? clientField[0] : clientField;
  ```

- **Subscriptions**: When accessing subscription data, use the SubscriptionsID field to get IDs for related subscriptions:
  ```typescript
  // Example of retrieving subscription IDs from a project
  const subscriptionIds = Array.isArray(project.fields.SubscriptionsID) 
    ? project.fields.SubscriptionsID 
    : [project.fields.SubscriptionsID];
  ```