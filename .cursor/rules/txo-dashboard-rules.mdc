---
description: 
globs: 
alwaysApply: true
---
# Texonica Business Dashboard - AI Rules

## General Code Style & Naming
- Use relatively short but legible names for functions & variables
- Don't change existing variable names unless necessary
- Ensure proper TypeScript typing for all files
- Keep components focused and reusable
- Follow Next.js 13+ App Router conventions
- We use aitable.ai as a database with our own API implementation in `src/lib/api/aitable.ts`
- The MCP integration for AITable is ONLY for debugging and development, never for production code
- All AITable API calls must go through our backend API endpoints to protect credentials
- We want to have high security. API is contacted only through backend.
- We want to make tests for every functionality we add.

## AITable Integration
- Use the fusion API endpoints (`/fusion/v1/...`) for all AITable interactions
- Always proxy API calls through our backend routes in `src/app/api/`
- Store API keys in environment variables only, never in client-side code
- The AITable API client is implemented in `src/lib/api/aitable.ts`
- All AITable data fetching should use the functions exported from this module
- The MCP integration is for development assistance only and should not be used in actual implementation

## Data Type Handling
- Parse numeric fields with `Number()` or `parseFloat()`
- Handle all string fields appropriately
- Format dates from YYYY-MM-DD strings as needed
- Format percentages with 0 decimal places
- Format currency values according to account settings

## Component Guidelines
- Keep UI components in `src/components/`
- Place reusable UI elements in `src/components/ui/`
- Put providers in `src/components/providers/`
- Maintain clear separation of concerns between components

## Core Logic
- Keep business logic in `src/lib/`
- Place type definitions in `src/lib/types.ts`
- Store constants in `src/lib/config.ts`
- Handle data fetching in `src/lib/api/` directory
- Process metrics in `src/lib/metrics.ts`

## File References
@file:src/lib/types.ts
@file:src/lib/metrics.ts
@file:src/lib/config.ts
@file:src/lib/api/aitable.ts

## Project Structure
Follow the established directory structure:
```
src/
├── app/                    # Next.js 13+ app directory
│   ├── api/                # API routes for backend operations
│   │   └── projects/       # AITable projects API endpoint
├── components/             # Reusable UI components
└── lib/                    # Core logic and utilities
    ├── api/                # API client implementations
    │   └── aitable.ts      # AITable API client
```

## Error Handling
- Implement checks for missing/null values
- Handle API errors gracefully
- Provide user feedback for data loading states
- Validate data types before processing

## Performance Guidelines
- Optimize component re-renders
- Implement proper data caching
- Use appropriate loading states
- Follow React best practices for memoization 