---
description: "Anthropic Claude API integration guidelines and usage patterns"
globs: "**/lib/api/claude.ts,**/app/api/claude/**/*,**/hooks/useClaude.ts"
alwaysApply: false
---
# Claude API Integration - AI Rules

## Model Selection Guide

### Available Models and Use Cases

| Model Name | Best Use Cases | When Not to Use | Context Window |
|------------|----------------|-----------------|----------------|
| `claude-3-opus-20240229` | Complex reasoning, creative tasks, nuanced understanding, advanced coding, research summaries. | Simple, high-frequency tasks where costs need to be minimized. | 200K tokens |
| `claude-3-sonnet-20240229` | Balanced quality/cost option for most applications, content generation, complex coding tasks. | Very simple tasks or extremely complex reasoning requiring Opus. | 200K tokens |
| `claude-3-haiku-20240307` | High-speed, low-latency applications, simple Q&A, content moderation, classification tasks. | Complex reasoning, creative writing, or nuanced tasks. | 200K tokens |
| `claude-3-5-sonnet-20240620` | Latest balanced model with improved capabilities over 3.0, advanced coding, reasoning, and content generation. | Simple tasks where Claude 3 Haiku would be more cost-effective. | 200K tokens |

### Selection Criteria

- **For highest capability needs**: Use `claude-3-opus-20240229` when you need the most advanced reasoning, creativity, and nuance.
- **For balanced performance**: Use `claude-3-sonnet-20240229` or `claude-3-5-sonnet-20240620` for a good balance of quality and cost.
- **For speed and efficiency**: Use `claude-3-haiku-20240307` when response speed is critical and tasks are simpler.
- **For newest capabilities**: Use `claude-3-5-sonnet-20240620` to leverage the latest model improvements.

### Implementation Example

```typescript
import { claudeClient } from '@/lib/api/claude';

// Choose model based on task requirements
export async function generateWithOptimalModel(prompt: string, task: 'simple' | 'balanced' | 'complex' | 'latest') {
  let model = 'claude-3-sonnet-20240229'; // Default model
  
  switch (task) {
    case 'simple':
      model = 'claude-3-haiku-20240307'; // Optimized for speed
      break;
    case 'complex':
      model = 'claude-3-opus-20240229'; // Highest capability
      break;
    case 'latest':
      model = 'claude-3-5-sonnet-20240620'; // Latest improved model
      break;
    default:
      model = 'claude-3-sonnet-20240229'; // Balanced option
  }
  
  return await claudeClient.createMessage(prompt, model);
}
```

## General Guidelines

- Always use the server-side implementation for Claude API calls
- Never expose API keys in client-side code
- Use the provided hooks and components for client-side interactions
- All requests must go through the backend API endpoints
- Follow rate limiting best practices to avoid API usage issues
- Use proper error handling for all Claude API interactions
- Document all prompts and AI interactions for maintenance

## Implementation Details

- Server-side client: `src/lib/api/claude.ts`
- API routes: `src/app/api/claude/`
- Client hooks: `src/lib/hooks/useClaude.ts`

## API Key Management

- Store the API key in environment variables (`ANTHROPIC_API_KEY`)
- For local development, use `.env.local`
- For production, set up secure environment variables in your hosting platform
- Never commit API keys to version control

## Common Use Cases

### 1. Basic Message Generation

```typescript
// Server-side implementation (src/lib/api/claude.ts)
import Anthropic from '@anthropic-ai/sdk';

export class ClaudeClient {
  private client: Anthropic;
  
  constructor() {
    this.client = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY || '',
    });
  }
  
  async createMessage(prompt: string, model = 'claude-3-sonnet-20240229', maxTokens = 1024) {
    try {
      const response = await this.client.messages.create({
        model,
        max_tokens: maxTokens,
        messages: [
          { role: 'user', content: prompt }
        ],
      });
      
      return response;
    } catch (error) {
      console.error('Claude API error:', error);
      throw error;
    }
  }
}

export const claudeClient = new ClaudeClient();

// API route implementation (src/app/api/claude/message/route.ts)
import { NextRequest, NextResponse } from 'next/server';
import { claudeClient } from '@/lib/api/claude';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { prompt, model, maxTokens } = body;
    
    if (!prompt) {
      return NextResponse.json({ error: 'Prompt is required' }, { status: 400 });
    }
    
    const response = await claudeClient.createMessage(
      prompt, 
      model || 'claude-3-sonnet-20240229',
      maxTokens || 1024
    );
    
    return NextResponse.json({ response });
  } catch (error: any) {
    console.error('Error in Claude generation:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to generate content' },
      { status: 500 }
    );
  }
}

// Client-side hook (src/hooks/useClaude.ts)
import { useState } from 'react';

export function useClaude() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const generateContent = async (prompt: string, model?: string, maxTokens?: number) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/claude/message', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          model,
          maxTokens,
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate content');
      }
      
      const data = await response.json();
      return data.response;
    } catch (err: any) {
      setError(err.message || 'An error occurred');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    generateContent,
    isLoading,
    error,
  };
}

// Client-side usage
import { useClaude } from '@/hooks/useClaude';

function MyComponent() {
  const { generateContent, isLoading, error } = useClaude();
  
  const handleGenerate = async () => {
    try {
      const response = await generateContent("Explain quantum computing in simple terms");
      console.log(response);
    } catch (error) {
      console.error("Failed to generate content:", error);
    }
  };
  
  return (
    <div>
      <button 
        onClick={handleGenerate} 
        disabled={isLoading}
        className="px-4 py-2 bg-blue-500 text-white rounded"
      >
        {isLoading ? 'Generating...' : 'Generate Response'}
      </button>
      {error && <p className="text-red-500 mt-2">{error}</p>}
    </div>
  );
}
```

### 2. Chat Interface with Message History

```typescript
// Server-side implementation - additional method for chat
export class ClaudeClient {
  // ... existing code from above

  async continueConversation(messages: Array<{ role: 'user' | 'assistant', content: string }>, model = 'claude-3-sonnet-20240229', maxTokens = 1024) {
    try {
      const response = await this.client.messages.create({
        model,
        max_tokens: maxTokens,
        messages,
      });
      
      return response;
    } catch (error) {
      console.error('Claude API error:', error);
      throw error;
    }
  }
}

// API route implementation (src/app/api/claude/chat/route.ts)
import { NextRequest, NextResponse } from 'next/server';
import { claudeClient } from '@/lib/api/claude';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { messages, model, maxTokens } = body;
    
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return NextResponse.json({ error: 'Valid messages array is required' }, { status: 400 });
    }
    
    const response = await claudeClient.continueConversation(
      messages, 
      model || 'claude-3-sonnet-20240229',
      maxTokens || 1024
    );
    
    return NextResponse.json({ response });
  } catch (error: any) {
    console.error('Error in Claude chat:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to continue conversation' },
      { status: 500 }
    );
  }
}

// Enhanced client hook with chat functionality
import { useState } from 'react';

export function useClaude() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [chatHistory, setChatHistory] = useState<Array<{ role: 'user' | 'assistant', content: string }>>([]);
  
  // ... existing generateContent function from above
  
  const sendChatMessage = async (message: string, model?: string, maxTokens?: number) => {
    setIsLoading(true);
    setError(null);
    
    // Add user message to history
    const updatedHistory = [...chatHistory, { role: 'user', content: message }];
    setChatHistory(updatedHistory);
    
    try {
      const response = await fetch('/api/claude/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: updatedHistory,
          model,
          maxTokens,
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to send message');
      }
      
      const data = await response.json();
      const assistantMessage = { 
        role: 'assistant' as const, 
        content: data.response.content[0].text 
      };
      
      // Update history with assistant's response
      const finalHistory = [...updatedHistory, assistantMessage];
      setChatHistory(finalHistory);
      
      return data.response;
    } catch (err: any) {
      setError(err.message || 'An error occurred');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };
  
  const resetChat = () => {
    setChatHistory([]);
  };
  
  return {
    generateContent,
    sendChatMessage,
    chatHistory,
    resetChat,
    isLoading,
    error,
  };
}

// Client-side usage
import { useClaude } from '@/hooks/useClaude';
import { useState } from 'react';

function ChatComponent() {
  const { sendChatMessage, chatHistory, resetChat, isLoading } = useClaude();
  const [message, setMessage] = useState('');
  
  const handleSend = async () => {
    if (!message.trim()) return;
    
    try {
      await sendChatMessage(message);
      setMessage('');
    } catch (error) {
      console.error("Chat error:", error);
    }
  };
  
  return (
    <div className="flex flex-col h-[600px] border rounded-lg">
      <div className="flex-1 p-4 overflow-auto">
        {chatHistory.map((msg, i) => (
          <div key={i} className={`mb-4 ${msg.role === 'user' ? 'text-right' : 'text-left'}`}>
            <div className={`inline-block p-3 rounded-lg ${
              msg.role === 'user' ? 'bg-blue-100' : 'bg-gray-100'
            }`}>
              {msg.content}
            </div>
          </div>
        ))}
      </div>
      
      <div className="border-t p-4 flex">
        <input 
          className="flex-1 border rounded-l-lg px-4 py-2"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          disabled={isLoading}
          placeholder="Type your message..."
          onKeyPress={(e) => e.key === 'Enter' && handleSend()}
        />
        <button 
          className="bg-blue-500 text-white rounded-r-lg px-4 py-2 disabled:bg-blue-300"
          onClick={handleSend} 
          disabled={isLoading || !message.trim()}
        >
          {isLoading ? 'Sending...' : 'Send'}
        </button>
        <button 
          className="ml-2 bg-gray-200 rounded-lg px-4 py-2"
          onClick={resetChat}
        >
          Reset
        </button>
      </div>
    </div>
  );
}
```

### 3. Vision Capabilities with Images

```typescript
// Server-side implementation for vision (multimodal) capabilities
import Anthropic from '@anthropic-ai/sdk';
import { AnthropicMessage } from '@anthropic-ai/sdk/resources';

export class ClaudeClient {
  // ... existing code from above

  async processImageWithPrompt(imageBase64: string, prompt: string, model = 'claude-3-sonnet-20240229', maxTokens = 1024) {
    try {
      const mimeType = this.detectMimeType(imageBase64);
      
      const message: AnthropicMessage = {
        role: 'user',
        content: [
          { type: 'text', text: prompt },
          {
            type: 'image',
            source: {
              type: 'base64',
              media_type: mimeType,
              data: imageBase64,
            },
          },
        ],
      };
      
      const response = await this.client.messages.create({
        model,
        max_tokens: maxTokens,
        messages: [message],
      });
      
      return response;
    } catch (error) {
      console.error('Claude vision API error:', error);
      throw error;
    }
  }
  
  private detectMimeType(base64String: string): string {
    // Simple mime type detection from base64 string
    if (base64String.startsWith('/9j/')) {
      return 'image/jpeg';
    } else if (base64String.startsWith('iVBORw0')) {
      return 'image/png';
    } else if (base64String.startsWith('R0lGOD')) {
      return 'image/gif';
    } else if (base64String.startsWith('UklGR')) {
      return 'image/webp';
    }
    // Default to jpeg if unknown
    return 'image/jpeg';
  }
}

// API route implementation (src/app/api/claude/vision/route.ts)
import { NextRequest, NextResponse } from 'next/server';
import { claudeClient } from '@/lib/api/claude';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const prompt = formData.get('prompt') as string;
    const imageFile = formData.get('image') as File;
    const model = formData.get('model') as string || 'claude-3-sonnet-20240229';
    const maxTokens = parseInt(formData.get('maxTokens') as string || '1024', 10);
    
    if (!prompt || !imageFile) {
      return NextResponse.json({ error: 'Prompt and image are required' }, { status: 400 });
    }
    
    // Convert file to base64
    const bytes = await imageFile.arrayBuffer();
    const buffer = Buffer.from(bytes);
    const base64Image = buffer.toString('base64');
    
    const response = await claudeClient.processImageWithPrompt(
      base64Image,
      prompt,
      model,
      maxTokens
    );
    
    return NextResponse.json({ response });
  } catch (error: any) {
    console.error('Error in image analysis:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to analyze image' },
      { status: 500 }
    );
  }
}

// Enhanced client hook with vision functionality
import { useState } from 'react';

export function useClaude() {
  // ... existing state and functions
  
  const analyzeImage = async (image: File, prompt: string, model?: string, maxTokens?: number) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const formData = new FormData();
      formData.append('image', image);
      formData.append('prompt', prompt);
      if (model) formData.append('model', model);
      if (maxTokens) formData.append('maxTokens', String(maxTokens));
      
      const response = await fetch('/api/claude/vision', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to analyze image');
      }
      
      const data = await response.json();
      return data.response;
    } catch (err: any) {
      setError(err.message || 'An error occurred');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    // ... existing return values
    analyzeImage,
  };
}

// Client-side usage
import { useClaude } from '@/hooks/useClaude';
import { useState } from 'react';

function ImageAnalysisComponent() {
  const { analyzeImage, isLoading, error } = useClaude();
  const [image, setImage] = useState<File | null>(null);
  const [prompt, setPrompt] = useState('');
  const [result, setResult] = useState('');
  const [preview, setPreview] = useState<string | null>(null);
  
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setImage(file);
      // Create preview
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!image || !prompt) return;
    
    try {
      const response = await analyzeImage(image, prompt);
      setResult(response.content[0].text);
    } catch (error) {
      console.error("Image analysis error:", error);
    }
  };
  
  return (
    <div className="max-w-2xl mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">Image Analysis with Claude</h2>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block mb-2">Upload Image</label>
          <input 
            type="file" 
            accept="image/*"
            onChange={handleImageChange}
            className="border p-2 w-full"
          />
          {preview && (
            <div className="mt-2">
              <img src={preview} alt="Preview" className="max-h-40 rounded" />
            </div>
          )}
        </div>
        
        <div>
          <label className="block mb-2">Prompt</label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="border p-2 w-full h-24 rounded"
            placeholder="Ask Claude about this image..."
          />
        </div>
        
        <button
          type="submit"
          disabled={isLoading || !image || !prompt}
          className="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-blue-300"
        >
          {isLoading ? 'Analyzing...' : 'Analyze Image'}
        </button>
      </form>
      
      {error && <p className="text-red-500 mt-4">{error}</p>}
      
      {result && (
        <div className="mt-6">
          <h3 className="font-bold mb-2">Claude's Analysis:</h3>
          <div className="border p-4 rounded bg-gray-50">
            {result.split('\n').map((line, i) => (
              <p key={i} className={line.trim() === '' ? 'h-4' : 'mb-2'}>
                {line}
              </p>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
```

## Advanced Configuration

### System Prompts and Temperature Control

```typescript
// Configure model parameters for more creative or deterministic responses
async function createMessageWithParams(
  prompt: string, 
  model = 'claude-3-sonnet-20240229',
  options = {}
) {
  try {
    const defaultOptions = {
      max_tokens: 1024,
      temperature: 0.7,
      system: '',
    };
    
    const mergedOptions = { ...defaultOptions, ...options };
    const { max_tokens, temperature, system, ...rest } = mergedOptions;
    
    const response = await claudeClient.client.messages.create({
      model,
      max_tokens,
      temperature,
      system: system || undefined,
      messages: [
        { role: 'user', content: prompt }
      ],
      ...rest
    });
    
    return response;
  } catch (error) {
    console.error('Claude API error:', error);
    throw error;
  }
}

// Example usage with different configurations
const creativeResponse = await createMessageWithParams(
  "Write a short story about AI and humanity",
  'claude-3-sonnet-20240229',
  {
    temperature: 0.9,
    max_tokens: 2000,
    system: "You are a creative sci-fi author with a unique voice. Be imaginative and thought-provoking."
  }
);

const factualResponse = await createMessageWithParams(
  "Explain quantum computing",
  'claude-3-sonnet-20240229',
  {
    temperature: 0.1,
    max_tokens: 1500,
    system: "You are an educational assistant. Provide accurate, concise explanations with analogies where helpful."
  }
);
```

### Function Calling Implementation

```typescript
// Server-side implementation with function calling
import Anthropic from '@anthropic-ai/sdk';
import { Tool } from '@anthropic-ai/sdk/resources';

export class ClaudeClient {
  // ... existing code

  async callWithTools(prompt: string, tools: Tool[], model = 'claude-3-5-sonnet-20240620') {
    try {
      const response = await this.client.messages.create({
        model,
        max_tokens: 1024,
        messages: [
          { role: 'user', content: prompt }
        ],
        tools,
        tool_choice: "auto",
      });
      
      return response;
    } catch (error) {
      console.error('Claude function calling error:', error);
      throw error;
    }
  }
}

// Example usage with function calling
const weatherTool = {
  name: "get_current_weather",
  description: "Get the current weather in a given location",
  input_schema: {
    type: "object",
    properties: {
      location: {
        type: "string",
        description: "The city and state, e.g. San Francisco, CA",
      },
      unit: {
        type: "string",
        enum: ["celsius", "fahrenheit"],
        description: "The unit of temperature to return",
      },
    },
    required: ["location"],
  },
};

const response = await claudeClient.callWithTools(
  "What's the weather like in San Francisco and Tokyo right now?",
  [weatherTool],
  'claude-3-5-sonnet-20240620'
);

// Process tool calls
if (response.content[0].type === 'tool_use') {
  const toolCall = response.content[0];
  console.log("Tool called:", toolCall.name);
  console.log("With arguments:", toolCall.input);
  
  // In a real implementation, you would call the actual weather API here
  // and then call claudeClient.client.messages.create again with the tool results
}
```

## Monitoring and Telemetry

Track API usage patterns and costs with our telemetry system:

```typescript
// In your Claude client implementation
import { recordLLMUse } from '@/lib/api/telemetry';

async createMessage(prompt: string, model = 'claude-3-sonnet-20240229', maxTokens = 1024) {
  try {
    const startTime = Date.now();
    
    const response = await this.client.messages.create({
      model,
      max_tokens: maxTokens,
      messages: [
        { role: 'user', content: prompt }
      ],
    });
    
    // Record usage in telemetry
    recordLLMUse({
      model,
      inputTokens: response.usage.input_tokens,
      outputTokens: response.usage.output_tokens,
      latencyMs: Date.now() - startTime,
      success: true,
      provider: 'anthropic',
    });
    
    return response;
  } catch (error) {
    console.error('Claude API error:', error);
    
    // Record failed request
    recordLLMUse({
      model,
      inputTokens: 0,
      outputTokens: 0,
      latencyMs: Date.now() - startTime,
      success: false,
      error: error.message,
      provider: 'anthropic',
    });
    
    throw error;
  }
}
```

## Rate Limiting and Error Handling

```typescript
import { rateLimit } from '@/lib/utils/rateLimiter';

// Add rate limiting to your client
const claudeRateLimiter = rateLimit({
  tokensPerMinute: 100000, // Adjust based on your Anthropic plan
  maxConcurrent: 5,
});

async createMessage(prompt: string, model = 'claude-3-sonnet-20240229', maxTokens = 1024) {
  return claudeRateLimiter(async () => {
    try {
      const response = await this.client.messages.create({
        model,
        max_tokens: maxTokens,
        messages: [
          { role: 'user', content: prompt }
        ],
      });
      
      return response;
    } catch (error) {
      // Handle specific error types
      if (error.status === 429) {
        console.error('Rate limit exceeded:', error);
        throw new Error('Claude API rate limit exceeded. Please try again later.');
      } else if (error.status === 400) {
        console.error('Bad request:', error);
        throw new Error('Invalid request to Claude API: ' + error.message);
      } else if (error.status === 401) {
        console.error('Authentication error:', error);
        throw new Error('Authentication failed with Claude API. Check your API key.');
      } else {
        console.error('Claude API error:', error);
        throw error;
      }
    }
  });
}
``` 